{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/actions/counter.actions.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/reducers/counter.reducer.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core'\nimport { Action } from '@ngrx/store'\n\nexport const INCREMENT = 'Increment'\nexport const DECREMENT = 'Decrement'\n\nexport class Increment implements Action {\n  readonly type = INCREMENT\n\n  constructor(public payload: number) { }\n}\n\nexport class Decrement implements Action {\n  readonly type = DECREMENT\n\n  constructor(public payload: number) { }\n}\n\nexport type Actions = Increment | Decrement;\n","module.exports = \"\"","module.exports = \"<h3>Counter</h3>\\n<p>{{ counter }}</p>\\n<button (click)=\\\"add()\\\">Increment</button>\\n<button (click)=\\\"subtract()\\\">Decrement</button>\\n\"","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Store, select } from '@ngrx/store';\n\nimport { AppState } from './models/app-state.model';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  public counter: number;\n\n  constructor(\n    private store: Store<AppState>\n  ) {\n    this.store.select('app').subscribe(state => {\n      console.log(state);\n      this.counter = state.counter;\n    });\n  }\n\n  add() {\n    this.store.dispatch({\n      type: 'Increment',\n      payload: 1\n    });\n  }\n\n  subtract() {\n    this.store.dispatch({\n      type: 'Decrement',\n      payload: 1\n    });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { AppComponent } from './app.component';\nimport { reducer } from './reducers/counter.reducer';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({\n      app: reducer\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Action } from '@ngrx/store'\nimport * as CounterActions from './../actions/counter.actions'\n\nconst initialAppState = {\n  counter: 0\n}\n\nexport function reducer(appState = initialAppState, action: CounterActions.Actions) {\n  switch (action.type) {\n    case CounterActions.INCREMENT:\n      appState.counter = appState.counter + 1;\n      return {\n        counter: appState.counter,\n        payload: action.payload\n      }\n    case CounterActions.DECREMENT:\n      appState.counter = appState.counter - 1;\n      return {\n        counter: appState.counter,\n        payload: action.payload\n      };\n    default:\n      return appState;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}